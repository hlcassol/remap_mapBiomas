// Remap of CAR using MapBiomas

// Fazenda
var roi = Faz_Jerusa;
var fazenda = "Faz_Jerusa"

Map.addLayer(Faz_Jerusa,{},fazenda)
// Select the year
var year = 2022

// Get the 'codigoCAR' value from the FeatureCollection
var codigoCAR = ee.String(roi.aggregate_array('recibo').get(0));
print(codigoCAR);

// Asset mapbiomas Collection 9
var mapbio = ee.Image('projects/mapbiomas-public/assets/brazil/lulc/collection9/mapbiomas_collection90_integration_v1')

// Clip collection for a year
var mapbio_clip = mapbio.select('classification_'+year).clip(roi);

// / Color ramp
// /{
var sld_intervals =
'<RasterSymbolizer>' +
  '<ColorMap type="intervals" extended="false">' +
      ' <ColorMapEntry color="#006400" alpha="255" quantity="3" label="3 - Formacao Florestal"/>'+
      ' <ColorMapEntry color="#00ff00" alpha="255" quantity="4" label="4 - Formacaoo Savanica"/>'+
      ' <ColorMapEntry color="#687537" alpha="255" quantity="5" label="5 - Mangue"/>'+
      ' <ColorMapEntry color="#ad4413" alpha="255" quantity="9" label="9 - Silvicultura"/>'+
      ' <ColorMapEntry color="#45c2a5" alpha="255" quantity="11" label="11 - Campo Alagado e Area Pantanosa"/>'+
      '  <ColorMapEntry color="#b8af4f" alpha="255" quantity="12" label="12 - Formacaoo Campestre"/>'+
      '  <ColorMapEntry color="#f1c232" alpha="255" quantity="13" label="13 - Outras FormaÃ§Ãµes nÃ£o Florestais"/>'+
      '  <ColorMapEntry color="#ffd966" alpha="255" quantity="15" label="15 - Pastagem"/>'+
      '  <ColorMapEntry color="#c27ba0" alpha="255" quantity="20" label="20 - Cana"/>'+
      '  <ColorMapEntry  color="#fff3bf" alpha="255" quantity="21" label="21 - Mosaico de Agricultura e Pastagem"/>'+
      '  <ColorMapEntry  color="#dd7e6b" alpha="255" quantity="23" label="23 - Praia, Duna e Areal"/>'+
      '  <ColorMapEntry  color="#aa0000" alpha="255" quantity="24" label="24 - Area Urbana"/>'+
      '  <ColorMapEntry  color="#ff3d3d" alpha="255" quantity="25" label="25 - Outras Areas nao Vegetadas"/>'+
      '  <ColorMapEntry  color="#665a3a" alpha="255" quantity="29" label="29 - Afloramento Rochoso"/>'+
      '  <ColorMapEntry  color="#af2a2a" alpha="255" quantity="30" label="30 - Mineracao"/>'+
      '  <ColorMapEntry  color="#02106f" alpha="255" quantity="31" label="31 - Aquicultura"/>'+
      '  <ColorMapEntry  color="#968c46" alpha="255" quantity="32" label="34 - Apicum"/>'+
      '  <ColorMapEntry  color="#0000ff" alpha="255" quantity="33" label="33 - Rio, Lago e Oceano"/>'+
      '  <ColorMapEntry  color="#e075ad" alpha="255" quantity="39" label="39 - Soja"/>'+
      '  <ColorMapEntry  color="#982c9e" alpha="255" quantity="40" label="40 - Arroz (beta)"/>'+
      '  <ColorMapEntry  color="#e787f8" alpha="255" quantity="41" label="41 - Outras Lavouras Temporarias"/>'+
      '  <ColorMapEntry  color="#cca0d4" alpha="255" quantity="46" label="46 - Cafe (beta)"/>'+
      '  <ColorMapEntry  color="#d082de" alpha="255" quantity="47" label="47 - Citrus (beta)"/>'+
      '  <ColorMapEntry  color="#cd49e4" alpha="255" quantity="48" label="48 - Outras Lavouras Perenes"/>'+
      '  <ColorMapEntry  color="#6b9932" alpha="255" quantity="49" label="49 - Restinga Arborizada (beta)"/>'+
  '</ColorMap>' +
'</RasterSymbolizer>';
//}

// plot original Map biomas original classes
Map.centerObject(roi,13);
Map.addLayer(mapbio_clip.sldStyle(sld_intervals),{},'MapBiomas_8.1_'+year)
Map.addLayer(mapbio_clip,{},'MapBiomas_8.1_'+year)

// palette from MapBiomas https://bluebellindex.sharepoint.com/:x:/s/BLUEBELLINDEX/Ed2B6zEG3zdGorbmNP5J1NgBcJLtq4vL2HXHznFN4U9HUg?e=8D3HMp
var palette = ['#129912','#bbfcac','#e974ed','#ffd966','#935132','#ea9999','#0000ff']
var palette2 = ['#129912','#bbfcac','#e974ed','#ea9999','#935132','#ffd966','#0000ff']

//reclassification
var reclass= mapbio_clip.remap([1,3,4,5,6,49,10,11,12,32,29,50,13,14,15,18,19,39,20,40,62,41,36,46,47,35,48,9,21,22,23,24,30,25,26,33,31,27],
                               [1,1,1,1,1, 1 ,2, 2,2,2,2,2,2,3,6,3,3,3,3,3,3,3,3,3,3,3,3,5,3,4,4,4,4,4,7,7,7,4]);

// Plot reclassification
Map.addLayer(reclass,{palette:palette2},'MapBiomas_8_reclass'+year);

// Export reclass to Drive .tiff
Export.image.toDrive({
  image: reclass, 
  description: fazenda + '_reclass_'+year,
  region: roi,
  scale: 30, // Always specify scale! 
  maxPixels: 1300000000
});

// First create a 2 band image with the area image and the classified image
// Divide the area image by 1e6 so area results are in Sq Km
var areaImage = ee.Image.pixelArea().divide(1e4).addBands(reclass);

// Calculate areas
var areas = areaImage.reduceRegion({
      reducer: ee.Reducer.sum().group({
      groupField: 1,
      groupName: 'remapped',
    }),
    geometry: roi,
    scale: 30,
    maxPixels: 1e10
    }); 
 
var classAreas = ee.List(areas.get('groups'))

// Process results to extract the areas and
// create a FeatureCollection

// We can define a dictionary with class names
var classNames = ee.Dictionary({
  '1': 'Forest',
  '2': 'Non Forest',
  '3': 'Agriculture',
  '4': 'Non Vegetated',
  '5': 'Silviculture',
  '6': 'Pasture',
  '7': 'Water'
})

var classAreas = classAreas.map(function(item) {
  var areaDict = ee.Dictionary(item)
  var classNumber = ee.Number(areaDict.get('remapped')).format();
  var className = classNames.get(classNumber);
  var area = ee.Number(
    areaDict.get('sum'))
  return ee.Feature(null, {'class': classNumber, 'class_name': className, 'area': area})
})

var classAreaFc = ee.FeatureCollection(classAreas);

// Get the features from the collection as a list
var featureList = classAreaFc.toList(classAreaFc.size());

// Initialize an empty JavaScript object
var classAreaList = {};

// Iterate through the features in the list and add them to the object
for (var i = 0; i < featureList.length().getInfo(); i++) {
  var feature = ee.Feature(featureList.get(i));
  var properties = feature.toDictionary();
  var id = feature.id().getInfo();
  classAreaList[id] = properties;
}

// Print the JavaScript object
print('Class area (ha):',classAreaList);

// Get the string value to the client-side
codigoCAR.getInfo(function(clientSideCodigoCAR) {

 // Use client-side string in the export description
  var exportDescription = clientSideCodigoCAR + '_area_class_data_' + year;
  
// Export the FeatureCollection as a CSV file to Google Drive
Export.table.toDrive({
  collection: classAreaFc,
  description: exportDescription,
  fileFormat: 'CSV'
});

});

// We can now chart the resulting FeatureCollection
// If your area is large, it is advisable to first Export
// the FeatureCollection as an Asset and import it once
// the export is finished.
// Let's create a Bar Chart
var areaChart = ui.Chart.feature.byProperty({
  features: classAreaFc,
  xProperties: ['area'],
  seriesProperty: 'class_name',
}).setChartType('ColumnChart')
  .setOptions({
    hAxis: {title: 'Classes'},
    vAxis: {title: 'Area (ha)'},
    title: 'Area by class',
    colors:palette
    // series: {
    //   0: { color: '#129912' },
    //   1: { color: '#bbfcac' },
    //   2: { color: '#e974ed' },
    //   3: { color: '#ffd966' },
    //   4: { color: '#935132' },
    //   5: { color: '#ea9999' },
    //   6: { color: '#0000ff' }
    // }
  });
print(areaChart); 

// We can also create a Pie-Chart
var areaChart = ui.Chart.feature.byFeature({
  features: classAreaFc,
  xProperty: 'class_name',
  yProperties: ['area']
}).setChartType('PieChart')
  .setOptions({
    hAxis: {title: 'Classes'},
    vAxis: {title: 'Area (ha)'},
    title: 'Area by class',
    colors: palette
  });
print(areaChart); 
// set position of panel
var legend = ui.Panel({
  style: {
    position: 'bottom-left',
    padding: '8px 15px'
  }
});
 
// Create legend title to dry biomass
var legendTitle = ui.Label({
  value: 'Map Biomas Classes col 8 Reclass',
  style: {
    fontWeight: 'bold',
    fontSize: '18px',
    margin: '0 0 4px 0',
    padding: '0'
    }
});
 
// Add the title to the panel
legend.add(legendTitle);
 
// Creates and styles 1 row of the legend.
var makeRow = function(color, name) {
 
      // Create the label that is actually the colored box.
      var colorBox = ui.Label({
        style: {
          backgroundColor: ''+ color,
          // Use padding to give the box height and width.
          padding: '8px',
          margin: '0 0 4px 0'
        }
      });
 
      // Create the label filled with the description text.
      var description = ui.Label({
        value: name,
        style: {margin: '0 0 4px 6px'}
      });
 
      // return the panel
      return ui.Panel({
        widgets: [colorBox, description],
        layout: ui.Panel.Layout.Flow('horizontal')
      });
};
 
//  Palette with the colors
var palette =palette;
 
// name of the legend
var names = ['Forest','Non Forest','Agriculture','Pasture','Silviculture','Non Vegetated','Water'];

// Add color and and names
for (var i = 0; i < 7; i++) {
  legend.add(makeRow(palette[i], names[i]));
  }
 
// add legend to map (alternatively you can also print the legend to the console)
Map.add(legend);
